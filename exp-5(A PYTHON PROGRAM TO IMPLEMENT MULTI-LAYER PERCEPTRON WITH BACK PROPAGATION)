import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.datasets import make_classification

# Step 1: Generate dataset
X, y = make_classification(n_samples=1000, n_features=4, n_classes=2,
                           n_informative=2, n_redundant=0, random_state=42)

# Step 2: Create DataFrame
data = pd.DataFrame(X, columns=['Feature1', 'Feature2', 'Feature3', 'Feature4'])
data['Class'] = y

print("First 10 Rows:\n", data.head(10))
print("\nDataset Shape:", data.shape)
print("\nDescriptive Statistics:\n", data.describe())

# Step 3: Split dataset (80-20)
x = data.drop('Class', axis=1)
y = data['Class']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Step 4: Train and Evaluate Models with Different Activations
activations = ['relu', 'logistic', 'tanh', 'identity']

for act in activations:
    print("\n=====================================")
    print(f"Activation Function: {act}")
    print("=====================================")
    mlp = MLPClassifier(max_iter=500, activation=act, random_state=42)
    mlp.fit(x_train, y_train)
    pred = mlp.predict(x_test)
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, pred))
    print("\nClassification Report:")
    print(classification_report(y_test, pred))

# Step 5: Repeat with 70-30 ratio
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

for act in activations:
    print("\n=====================================")
    print(f"Activation Function (70-30 Split): {act}")
    print("=====================================")
    mlp = MLPClassifier(max_iter=500, activation=act, random_state=42)
    mlp.fit(x_train, y_train)
    pred = mlp.predict(x_test)
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, pred))
    print("\nClassification Report:")
    print(classification_report(y_test, pred))
